import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:equatable/equatable.dart';
import '../../../domain/models/resume_model.dart';
import '../../../domain/services/ai_resume_service.dart';

part 'resume_creation_event.dart';
part 'resume_creation_state.dart';

class ResumeCreationBloc
    extends Bloc<ResumeCreationEvent, ResumeCreationState> {
  final AIResumeService _aiResumeService;

  ResumeCreationBloc({
    required AIResumeService aiResumeService,
  })  : _aiResumeService = aiResumeService,
        super(const ResumeCreationState()) {
    on<UpdatePersonalInfoEvent>(_onUpdatePersonalInfo);
    on<UpdateWorkExperienceEvent>(_onUpdateWorkExperience);
    on<UpdateEducationEvent>(_onUpdateEducation);
    on<UpdateSkillsEvent>(_onUpdateSkills);
    on<UpdateProjectsEvent>(_onUpdateProjects);
    on<UpdateJobDescriptionEvent>(_onUpdateJobDescription);
    on<AnalyzeWithAIEvent>(_onAnalyzeWithAI);
    on<SaveResumeEvent>(_onSaveResume);
  }

  void _onUpdatePersonalInfo(
    UpdatePersonalInfoEvent event,
    Emitter<ResumeCreationState> emit,
  ) {
    emit(state.copyWith(personalInfo: event.personalInfo));
  }

  void _onUpdateWorkExperience(
    UpdateWorkExperienceEvent event,
    Emitter<ResumeCreationState> emit,
  ) {
    emit(state.copyWith(workExperience: event.workExperience));
  }

  void _onUpdateEducation(
    UpdateEducationEvent event,
    Emitter<ResumeCreationState> emit,
  ) {
    emit(state.copyWith(education: event.education));
  }

  void _onUpdateSkills(
    UpdateSkillsEvent event,
    Emitter<ResumeCreationState> emit,
  ) {
    emit(state.copyWith(skills: event.skills));
  }

  void _onUpdateProjects(
    UpdateProjectsEvent event,
    Emitter<ResumeCreationState> emit,
  ) {
    emit(state.copyWith(projects: event.projects));
  }

  void _onUpdateJobDescription(
    UpdateJobDescriptionEvent event,
    Emitter<ResumeCreationState> emit,
  ) {
    emit(state.copyWith(jobDescription: event.jobDescription));
  }

  Future<void> _onAnalyzeWithAI(
    AnalyzeWithAIEvent event,
    Emitter<ResumeCreationState> emit,
  ) async {
    try {
      emit(state.copyWith(isAnalyzing: true, errorMessage: null));

      // Create a resume model from current state
      final resume = ResumeModel(
        id: '', // Will be generated when saving
        userId: '', // Will be set when saving
        templateId: event.templateId,
        title: 'My Resume', // TODO: Allow user to set title
        personalInfo: state.personalInfo!,
        workExperience: state.workExperience ?? [],
        education: state.education ?? [],
        skills: state.skills ?? [],
        languages: [], // TODO: Add language section
        summary: '', // Will be generated by AI
        certifications: [],
        projects: state.projects ?? [],
        interests: [],
        references: [],
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
        isDraft: true,
        customSections: {},
        atsScore: const AtsScore(
          score: 0,
          matchedKeywords: [],
          missingKeywords: [],
          suggestions: [],
          sectionScores: {},
        ),
      );

      // If job description is provided, analyze it
      if (state.jobDescription != null && state.jobDescription!.isNotEmpty) {
        final keywordsResult = await _aiResumeService.analyzeJobDescription(
          state.jobDescription!,
        );

        keywordsResult.fold(
          (failure) => emit(state.copyWith(
            isAnalyzing: false,
            errorMessage: failure.message,
          )),
          (keywords) async {
            // Optimize resume for ATS
            final atsResult = await _aiResumeService.optimizeForATS(
              resume,
              state.jobDescription!,
            );

            atsResult.fold(
              (failure) => emit(state.copyWith(
                isAnalyzing: false,
                errorMessage: failure.message,
              )),
              (atsScore) => emit(state.copyWith(
                isAnalyzing: false,
                suggestedKeywords: keywords,
                atsScore: atsScore,
              )),
            );
          },
        );
      }

      // Generate summary
      final summaryResult = await _aiResumeService.generateSummary(
        resume,
        null, // TODO: Add target role
      );

      summaryResult.fold(
        (failure) => emit(state.copyWith(
          isAnalyzing: false,
          errorMessage: failure.message,
        )),
        (summary) => emit(state.copyWith(
          isAnalyzing: false,
          generatedSummary: summary,
        )),
      );

      // Get improvement suggestions
      final suggestionsResult = await _aiResumeService.suggestImprovements(
        resume,
      );

      suggestionsResult.fold(
        (failure) => emit(state.copyWith(
          isAnalyzing: false,
          errorMessage: failure.message,
        )),
        (suggestions) => emit(state.copyWith(
          isAnalyzing: false,
          improvementSuggestions: suggestions,
        )),
      );
    } catch (e) {
      emit(state.copyWith(
        isAnalyzing: false,
        errorMessage: 'Failed to analyze resume: ${e.toString()}',
      ));
    }
  }

  Future<void> _onSaveResume(
    SaveResumeEvent event,
    Emitter<ResumeCreationState> emit,
  ) async {
    // TODO: Implement save resume
  }
}
